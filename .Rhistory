summarise(Cases = sum(Cases),
D = sum(D)) %>%
mutate(dia_p = Cases/D)
plotDat <-
d_prop %>%
filter(sex == "m")
cor(x=plotDat$PD, y= plotDat$dia_p, method = "kendal")
plot(x=plotDat$PD, y= plotDat$dia_p, log = "x")
d_prop <-
d %>%
filter(Age == 65) %>%
group_by(sex, Region, PD, Typ, dia) %>%
summarise(Cases = sum(Cases),
D = sum(D)) %>%
mutate(dia_p = Cases/D)
plotDat <-
d_prop %>%
filter(sex == "m" & dia == 3)
cor(x=plotDat$PD, y= plotDat$dia_p, method = "kendal")
plot(x=plotDat$PD, y= plotDat$dia_p, log = "x")
d_prop <-
d %>%
group_by(sex, Region, PD, Typ, dia) %>%
summarise(Cases = sum(Cases),
D = sum(D)) %>%
mutate(dia_p = Cases/D)
plotDat <-
d_prop %>%
filter(sex == "m" & dia == 3)
cor(x=plotDat$PD, y= plotDat$dia_p, method = "kendal")
plot(x=plotDat$PD, y= plotDat$dia_p, log = "x")
d_cod <-
read_excel("data_input/Todesursachen_HKE_AlterG_Geschl_Kreis_2012_2018e_anonymisiert.xlsx",
range = "A1:E22401") %>%
filter(AlterG90 > 60) %>%
rename(Age = AlterG90, Region = RegKreis, dia = HKE) %>%
mutate(sex = ifelse(Geschl == 1, "m", "w"),
D = as.numeric(D)) %>%
select(Age, sex, Region, dia, D)
d_cod %>% filter(is.na(D))
d_cod <-
read_excel("data_input/Todesursachen_HKE_AlterG_Geschl_Kreis_2012_2018e_anonymisiert.xlsx",
range = "A1:E22401") %>%
filter(AlterG90 > 60) %>%
rename(Age = AlterG90, Region = RegKreis, dia = HKE) %>%
mutate(sex = ifelse(Geschl == 1, "m", "w"),
D = as.numeric(D)) %>%
rowwise() %>%
mutate(D = ifelse(is.na(D),
sample(x = c(0,1,2), size = 1),
D)) %>%
select(Age, sex, Region, dia, D)
d_cod %>% filter(is.na(D))
d <-
d_hosp %>%
left_join(d_cod) %>%
filter(!is.na(D))
# Load and merge information on Rural and Urban characteristics
inkar <- read_delim("data_input/inkar_PopDensity_RegionTyp.csv",
delim = ";", skip = 2,
col_names = c("ags2017kreis", "Name", "Var1", "Typ", "PD"),
locale=locale(decimal_mark = ",")) %>%
mutate(ags2017kreis = as.numeric(ags2017kreis),
PD_cat = case_when(PD <= 300 ~ 1,
300 < PD & PD <= 1000 ~ 2,
PD > 1000 ~ 3)) %>%
select(ags2017kreis, Typ, PD, PD_cat) %>%
rename(Region = ags2017kreis)
d <-
d %>%
left_join(inkar)
d_prop <-
d %>%
group_by(sex, Region, PD, Typ, dia) %>%
summarise(Cases = sum(Cases),
D = sum(D)) %>%
mutate(dia_p = Cases/D)
plot(x=plotDat$Typ, y= plotDat$dia_p)
d_prop <-
d %>%
group_by(sex, Region, PD, Typ, dia) %>%
summarise(Cases = sum(Cases),
D = sum(D)) %>%
mutate(dia_p = Cases/D)
cor(x=plotDat$PD, y= plotDat$dia_p, method = "kendal")
plot(x=plotDat$Typ, y= plotDat$dia_p)
d_prop %>%
group_by(Typ, dia, sex) %>%
group_map(~quantile(=.$dia_p, probs = c(0.1, 0.25, 0.5, 0.75, 0.9)))
d_prop %>%
group_by(Typ, dia, sex) %>%
group_map(~quantile(.$dia_p, probs = c(0.1, 0.25, 0.5, 0.75, 0.9)))
d_prop %>%
group_by(Typ, dia, sex) %>%
group_map(~quantile(.$dia_p, probs = c(0.1, 0.25, 0.5, 0.75, 0.9)), .keep = TRUE)
quan_kreis <- function(x){
quan <- quantile(.$dia_p, probs = c(0.1, 0.25, 0.5, 0.75, 0.9))
out <- tibble(
Typ = x$Typ[1],
dia = x$dia[1],
sex = x$sex[1],
q_10 = quan[1],
q_25 = quan[2],
q_50 = quan[3],
q_75 = quan[4],
q_90 = quan[5]
)
return(out)
}
q_dia <-
d_prop %>%
group_by(Typ, dia, sex) %>%
group_map(~quan_kreis(x=.), .keep = TRUE) %>%
bind_rows()
q_dia <-
d_prop %>%
group_by(Typ, dia, sex) %>%
group_map(~quan_kreis, .keep = TRUE) %>%
bind_rows()
q_dia <-
d_prop %>%
group_by(Typ, dia, sex) %>%
group_map(~quan_kreis(x=.), .keep = TRUE) %>%
bind_rows()
# Calculate qunatiles by typ
quan_kreis <- function(x){
quan <- quantile(x$dia_p, probs = c(0.1, 0.25, 0.5, 0.75, 0.9))
out <- tibble(
Typ = x$Typ[1],
dia = x$dia[1],
sex = x$sex[1],
q_10 = quan[1],
q_25 = quan[2],
q_50 = quan[3],
q_75 = quan[4],
q_90 = quan[5]
)
return(out)
}
q_dia <-
d_prop %>%
group_by(Typ, dia, sex) %>%
group_map(~quan_kreis(x=.), .keep = TRUE) %>%
bind_rows()
q_dia
plot(x=1:4, y= 1:4, ylim = c(0.1, 0.9))
dat <- q_dia %>% filter(Typ == 1 & sex == "m")
dat
plot(x=1:4, y= 1:4, ylim = c(0.1, 0.9))
dat <- q_dia %>% filter(Typ == 1 & sex == "m" & dia == 1)
d_prop <-
d %>%
group_by(sex, Region, PD, Typ, dia) %>%
summarise(Cases = sum(Cases),
D = sum(D)) %>%
mutate(dia_p = Cases/D)
# Calculate qunatiles by typ
quan_kreis <- function(x){
quan <- quantile(x$dia_p, probs = c(0.1, 0.25, 0.5, 0.75, 0.9))
out <- tibble(
Typ = x$Typ[1],
dia = x$dia[1],
sex = x$sex[1],
q_10 = quan[1],
q_25 = quan[2],
q_50 = quan[3],
q_75 = quan[4],
q_90 = quan[5]
)
return(out)
}
q_dia <-
d_prop %>%
group_by(Typ, dia, sex) %>%
group_map(~quan_kreis(x=.), .keep = TRUE) %>%
bind_rows()
plot(x=1:4, y= 1:4, ylim = c(0.1, 0.9))
dat <- q_dia %>% filter(Typ == 1 & sex == "m" & dia == 1)
dat
plot(x=1:4, y= 1:4, ylim = c(0.1, 0.9))
dat <- q_dia %>% filter(Typ == 1 & sex == "m" & dia == 1)
segments(x0=dat$Typ,y0=dat$q_10, x1=dat$Typ, y1=dat$q_90, lwd = 3,
col = "black")
plot(x=1:4, y= 1:4, ylim = c(0.1, 0.9))
dat <- q_dia %>% filter(Typ == 1 & sex == "m" & dia == 1)
segments(x0=dat$Typ,y0=dat$q_10, x1=dat$Typ, y1=dat$q_90, lwd = 3,
col = "darkgray")
lines(x=dat$Typ, y=dat$q_25, typ = "p", pch = 16)
lines(x=dat$Typ, y=dat$q_75, typ = "p", pch = 16)
plot(x=1:4, y= 1:4, ylim = c(0.1, 0.9))
dat <- q_dia %>% filter(Typ == 1 & sex == "m" & dia == 1)
segments(x0=dat$Typ,y0=dat$q_10, x1=dat$Typ, y1=dat$q_90, lwd = 3,
col = "darkgray")
lines(x=dat$Typ, y=dat$q_25, typ = "p", pch = 16)
lines(x=dat$Typ, y=dat$q_75, typ = "p", pch = 16)
lines(x=dat$Typ, y=dat$q_50, typ = "p", pch = 15)
plot(x=1:4, y= 1:4, ylim = c(0.1, 0.9))
for(i in 1:4){
dat <- q_dia %>% filter(Typ == i & sex == "m" & dia == 1)
segments(x0=dat$Typ,y0=dat$q_10, x1=dat$Typ, y1=dat$q_90, lwd = 3,
col = "darkgray")
lines(x=dat$Typ, y=dat$q_25, typ = "p", pch = 16)
lines(x=dat$Typ, y=dat$q_75, typ = "p", pch = 16)
lines(x=dat$Typ, y=dat$q_50, typ = "p", pch = 15)
}
par(mfrow = c(2,2))
for(j in 1:4)
plot(x=1:4, y= 1:4, ylim = c(0.1, 0.9), main = j)
for(i in 1:4){
dat <- q_dia %>% filter(Typ == i & sex == "m" & dia == j)
segments(x0=dat$Typ,y0=dat$q_10, x1=dat$Typ, y1=dat$q_90, lwd = 3,
col = "darkgray")
lines(x=dat$Typ, y=dat$q_25, typ = "p", pch = 16)
lines(x=dat$Typ, y=dat$q_75, typ = "p", pch = 16)
lines(x=dat$Typ, y=dat$q_50, typ = "p", pch = 15)
}
}
par(mfrow = c(2,2))
for(j in 1:4){
plot(x=1:4, y= 1:4, ylim = c(0.1, 0.9), main = j)
for(i in 1:4){
dat <- q_dia %>% filter(Typ == i & sex == "m" & dia == j)
segments(x0=dat$Typ,y0=dat$q_10, x1=dat$Typ, y1=dat$q_90, lwd = 3,
col = "darkgray")
lines(x=dat$Typ, y=dat$q_25, typ = "p", pch = 16)
lines(x=dat$Typ, y=dat$q_75, typ = "p", pch = 16)
lines(x=dat$Typ, y=dat$q_50, typ = "p", pch = 15)
}
}
dev.off()
par(mfrow = c(2,2))
for(j in 1:4){
plot(x=1:4, y= 1:4, ylim = c(0.1, 0.9), main = j)
for(i in 1:4){
dat <- q_dia %>% filter(Typ == i & sex == "m" & dia == j)
segments(x0=dat$Typ,y0=dat$q_10, x1=dat$Typ, y1=dat$q_90, lwd = 3,
col = "darkgray")
lines(x=dat$Typ, y=dat$q_25, typ = "p", pch = 16)
lines(x=dat$Typ, y=dat$q_75, typ = "p", pch = 16)
lines(x=dat$Typ, y=dat$q_50, typ = "p", pch = 15)
}
}
dev.off()
par(mfrow = c(2,2))
ylim_value <- rbind(c(0.3, 0.7), c(0.5, 0.8),
c(0.2, 0.5), c(0.5, 0.7))
for(j in 1:4){
plot(x=1:4, y= 1:4, ylim = ylim_value[j,], main = j)
for(i in 1:4){
dat <- q_dia %>% filter(Typ == i & sex == "m" & dia == j)
segments(x0=dat$Typ,y0=dat$q_10, x1=dat$Typ, y1=dat$q_90, lwd = 3,
col = "darkgray")
lines(x=dat$Typ, y=dat$q_25, typ = "p", pch = 16)
lines(x=dat$Typ, y=dat$q_75, typ = "p", pch = 16)
lines(x=dat$Typ, y=dat$q_50, typ = "p", pch = 15)
}
}
dev.off()
par(mfrow = c(2,2))
ylim_value <- rbind(c(0.25, 0.7), c(0.5, 0.8),
c(0.2, 0.5), c(0.5, 0.7))
for(j in 1:4){
plot(x=1:4, y= 1:4, ylim = ylim_value[j,], main = j)
for(i in 1:4){
dat <- q_dia %>% filter(Typ == i & sex == "m" & dia == j)
segments(x0=dat$Typ,y0=dat$q_10, x1=dat$Typ, y1=dat$q_90, lwd = 3,
col = "darkgray")
lines(x=dat$Typ, y=dat$q_25, typ = "p", pch = 16)
lines(x=dat$Typ, y=dat$q_75, typ = "p", pch = 16)
lines(x=dat$Typ, y=dat$q_50, typ = "p", pch = 15)
}
}
d_prop <-
d %>%
filter(Age = 70) %>%
group_by(sex, Region, PD, Typ, dia) %>%
summarise(Cases = sum(Cases),
D = sum(D)) %>%
mutate(dia_p = Cases/D)
# Calculate qunatiles by typ
quan_kreis <- function(x){
quan <- quantile(x$dia_p, probs = c(0.1, 0.25, 0.5, 0.75, 0.9))
out <- tibble(
Typ = x$Typ[1],
dia = x$dia[1],
sex = x$sex[1],
q_10 = quan[1],
q_25 = quan[2],
q_50 = quan[3],
q_75 = quan[4],
q_90 = quan[5]
)
return(out)
}
q_dia <-
d_prop %>%
group_by(Typ, dia, sex) %>%
group_map(~quan_kreis(x=.), .keep = TRUE) %>%
bind_rows()
dev.off()
par(mfrow = c(2,2))
ylim_value <- rbind(c(0.25, 0.7), c(0.5, 0.8),
c(0.2, 0.5), c(0.5, 0.7))
for(j in 1:4){
plot(x=1:4, y= 1:4, ylim = ylim_value[j,], main = j)
for(i in 1:4){
dat <- q_dia %>% filter(Typ == i & sex == "m" & dia == j)
segments(x0=dat$Typ,y0=dat$q_10, x1=dat$Typ, y1=dat$q_90, lwd = 3,
col = "darkgray")
lines(x=dat$Typ, y=dat$q_25, typ = "p", pch = 16)
lines(x=dat$Typ, y=dat$q_75, typ = "p", pch = 16)
lines(x=dat$Typ, y=dat$q_50, typ = "p", pch = 15)
}
}
d_prop <-
d %>%
filter(Age == 70) %>%
group_by(sex, Region, PD, Typ, dia) %>%
summarise(Cases = sum(Cases),
D = sum(D)) %>%
mutate(dia_p = Cases/D)
# Calculate qunatiles by typ
quan_kreis <- function(x){
quan <- quantile(x$dia_p, probs = c(0.1, 0.25, 0.5, 0.75, 0.9))
out <- tibble(
Typ = x$Typ[1],
dia = x$dia[1],
sex = x$sex[1],
q_10 = quan[1],
q_25 = quan[2],
q_50 = quan[3],
q_75 = quan[4],
q_90 = quan[5]
)
return(out)
}
q_dia <-
d_prop %>%
group_by(Typ, dia, sex) %>%
group_map(~quan_kreis(x=.), .keep = TRUE) %>%
bind_rows()
dev.off()
par(mfrow = c(2,2))
ylim_value <- rbind(c(0.25, 0.7), c(0.5, 0.8),
c(0.2, 0.5), c(0.5, 0.7))
for(j in 1:4){
plot(x=1:4, y= 1:4, ylim = ylim_value[j,], main = j)
for(i in 1:4){
dat <- q_dia %>% filter(Typ == i & sex == "m" & dia == j)
segments(x0=dat$Typ,y0=dat$q_10, x1=dat$Typ, y1=dat$q_90, lwd = 3,
col = "darkgray")
lines(x=dat$Typ, y=dat$q_25, typ = "p", pch = 16)
lines(x=dat$Typ, y=dat$q_75, typ = "p", pch = 16)
lines(x=dat$Typ, y=dat$q_50, typ = "p", pch = 15)
}
}
dev.off()
par(mfrow = c(2,2))
ylim_value <- rbind(c(0.25, 0.7), c(0.5, 0.8),
c(0.2, 0.5), c(0.5, 0.7))
for(j in 1:4){
plot(x=1:4, y= 1:4, ylim = ylim_value[j,], main = j)
for(i in 1:4){
dat <- q_dia %>% filter(Typ == i & sex == "m" & dia == j)
segments(x0=dat$Typ,y0=dat$q_10, x1=dat$Typ, y1=dat$q_90, lwd = 3,
col = "darkgray")
lines(x=dat$Typ, y=dat$q_25, typ = "p", pch = 16)
lines(x=dat$Typ, y=dat$q_75, typ = "p", pch = 16)
lines(x=dat$Typ, y=dat$q_50, typ = "p", pch = 15)
}
dat2 <- q_dia %>% filter(sex == "m" & dia == j)
lines(x=dat$Typ, y=dat$q_50, typ = "l", lwd  = 2)
}
dev.off()
par(mfrow = c(2,2))
ylim_value <- rbind(c(0.25, 0.7), c(0.5, 0.8),
c(0.2, 0.5), c(0.5, 0.7))
for(j in 1:4){
plot(x=1:4, y= 1:4, ylim = ylim_value[j,], main = j)
for(i in 1:4){
dat <- q_dia %>% filter(Typ == i & sex == "m" & dia == j)
segments(x0=dat$Typ,y0=dat$q_10, x1=dat$Typ, y1=dat$q_90, lwd = 3,
col = "darkgray")
lines(x=dat$Typ, y=dat$q_25, typ = "p", pch = 16)
lines(x=dat$Typ, y=dat$q_75, typ = "p", pch = 16)
lines(x=dat$Typ, y=dat$q_50, typ = "p", pch = 15)
}
dat2 <- q_dia %>% filter(sex == "m" & dia == j)
lines(x=da2$Typ, y=dat2$q_50, typ = "l", lwd  = 2)
}
dev.off()
par(mfrow = c(2,2))
ylim_value <- rbind(c(0.25, 0.7), c(0.5, 0.8),
c(0.2, 0.5), c(0.5, 0.7))
for(j in 1:4){
plot(x=1:4, y= 1:4, ylim = ylim_value[j,], main = j)
for(i in 1:4){
dat <- q_dia %>% filter(Typ == i & sex == "m" & dia == j)
segments(x0=dat$Typ,y0=dat$q_10, x1=dat$Typ, y1=dat$q_90, lwd = 3,
col = "darkgray")
lines(x=dat$Typ, y=dat$q_25, typ = "p", pch = 16)
lines(x=dat$Typ, y=dat$q_75, typ = "p", pch = 16)
lines(x=dat$Typ, y=dat$q_50, typ = "p", pch = 15)
}
dat2 <- q_dia %>% filter(sex == "m" & dia == j)
lines(x=dat2$Typ, y=dat2$q_50, typ = "l", lwd  = 2)
}
d_prop <-
d %>%
filter(Age == 85) %>%
group_by(sex, Region, PD, Typ, dia) %>%
summarise(Cases = sum(Cases),
D = sum(D)) %>%
mutate(dia_p = Cases/D)
# Calculate qunatiles by typ
quan_kreis <- function(x){
quan <- quantile(x$dia_p, probs = c(0.1, 0.25, 0.5, 0.75, 0.9))
out <- tibble(
Typ = x$Typ[1],
dia = x$dia[1],
sex = x$sex[1],
q_10 = quan[1],
q_25 = quan[2],
q_50 = quan[3],
q_75 = quan[4],
q_90 = quan[5]
)
return(out)
}
q_dia <-
d_prop %>%
group_by(Typ, dia, sex) %>%
group_map(~quan_kreis(x=.), .keep = TRUE) %>%
bind_rows()
dev.off()
par(mfrow = c(2,2))
ylim_value <- rbind(c(0.25, 0.7), c(0.5, 0.8),
c(0.2, 0.5), c(0.5, 0.7))
for(j in 1:4){
plot(x=1:4, y= 1:4, ylim = ylim_value[j,], main = j)
for(i in 1:4){
dat <- q_dia %>% filter(Typ == i & sex == "m" & dia == j)
segments(x0=dat$Typ,y0=dat$q_10, x1=dat$Typ, y1=dat$q_90, lwd = 3,
col = "darkgray")
lines(x=dat$Typ, y=dat$q_25, typ = "p", pch = 16)
lines(x=dat$Typ, y=dat$q_75, typ = "p", pch = 16)
lines(x=dat$Typ, y=dat$q_50, typ = "p", pch = 15)
}
dat2 <- q_dia %>% filter(sex == "m" & dia == j)
lines(x=dat2$Typ, y=dat2$q_50, typ = "l", lwd  = 2)
}
d_prop <-
d %>%
filter(Age == 90) %>%
group_by(sex, Region, PD, Typ, dia) %>%
summarise(Cases = sum(Cases),
D = sum(D)) %>%
mutate(dia_p = Cases/D)
# Calculate qunatiles by typ
quan_kreis <- function(x){
quan <- quantile(x$dia_p, probs = c(0.1, 0.25, 0.5, 0.75, 0.9))
out <- tibble(
Typ = x$Typ[1],
dia = x$dia[1],
sex = x$sex[1],
q_10 = quan[1],
q_25 = quan[2],
q_50 = quan[3],
q_75 = quan[4],
q_90 = quan[5]
)
return(out)
}
q_dia <-
d_prop %>%
group_by(Typ, dia, sex) %>%
group_map(~quan_kreis(x=.), .keep = TRUE) %>%
bind_rows()
dev.off()
par(mfrow = c(2,2))
ylim_value <- rbind(c(0.25, 0.7), c(0.5, 0.8),
c(0.2, 0.5), c(0.5, 0.7))
for(j in 1:4){
plot(x=1:4, y= 1:4, ylim = ylim_value[j,], main = j)
for(i in 1:4){
dat <- q_dia %>% filter(Typ == i & sex == "m" & dia == j)
segments(x0=dat$Typ,y0=dat$q_10, x1=dat$Typ, y1=dat$q_90, lwd = 3,
col = "darkgray")
lines(x=dat$Typ, y=dat$q_25, typ = "p", pch = 16)
lines(x=dat$Typ, y=dat$q_75, typ = "p", pch = 16)
lines(x=dat$Typ, y=dat$q_50, typ = "p", pch = 15)
}
dat2 <- q_dia %>% filter(sex == "m" & dia == j)
lines(x=dat2$Typ, y=dat2$q_50, typ = "l", lwd  = 2)
}
d_prop <-
d %>%
filter(Age == 90) %>%
group_by(sex, Typ, dia) %>%
summarise(Cases = sum(Cases),
D = sum(D)) %>%
mutate(dia_p = Cases/D)
d_prop
# This code prepares the death data for in and out hospital comparisons
# Load packages
source("code/A_00_packages_functions.R")
source("code/A_01.a_data_preparation.R")
inkar <- read_delim("data_input/inkar_PopDensity_RegionTyp.csv",
delim = ";", skip = 2,
col_names = c("ags2017kreis", "Name", "Var1", "Typ", "PD"),
locale=locale(decimal_mark = ","))
inkar
